__                          __     _       _     ___           ___     _____      _       _       ____
\ \          ____          / /    | |     | |   |   \         /   |   |  __ \    | |     | |     / ___|
 \ \        / __ \        / /     | |     | |   | |\ \       / /| |   | |  \ \   | |     | |    / /
  \ \      / /  \ \      / /      | |     | |   | | \ \     / / | |   | |__/ /   | |     | |    \ \___
   \ \    / /    \ \    / /       | |     | |   | |  \ \   / /  | |   |  ___/    | |     | |     \___ \
    \ \__/ /      \ \__/ /        \ \_____/ /   | |   \ \_/ /   | |   | |        \ \_____/ /     ___/ /
     \____/        \____/          \_______/    |_|    \___/    |_|   |_|         \_______/     |____/  
     
     
     
  ==============================================================================================================================
  Control(Richard):
  ==============================================================================================================================
  Keyboard/Mouse Input:
  
  Game Logic:
  
  ==============================================================================================================================
  Entities(Aaron):
  ==============================================================================================================================
  Player:

    Inputs:
      - Starting Room Position (int)
      - Starting direction (int)
      - Starting number of arrows (int)
      - Starting number of coins (int)
      - an instance of the Map class (Map)
      
    Outputs:
      - Nothing
      
    Public methods:
      - Player.moveInDirection(int moveDirection)
        - Attempts to move the player in a given direction, first checking if the move is possible in the Map class.
      - Player.changeCoins(int newCoins)
        - Adds the newCoins to the number of coins.
      - Player.changeArrows(int newArrows)
        - Adds the newArrows to the number of arrows.
      - Player.addTurn()
        - increments the player's turn and causes everything to update accordingly.
      - Player.updateScore()
        - causes the player to recalculate its score.
      - Player.checkVisible(int checkPosition)
        - checks if a certain position is visible to the player currently.
        
    Private methods:
      - Player.updateVisibleList(int)
        - checks all possibly visible locations and repopulates the list of visible locations.
  
  Wumpus:
  
  Wumpi:
  
  Items(for example weapon parts or powerups):
    ** Can be implemented by adding attributes and methods to the Player class.
    ** Not represented by an additional class, although can essentially be scaled as far as necessary.
  
  Hazards(bats/pits):
    ** This is part of the Map class according to the Wumpus Spec.
    ** We should consider moving it there or changing the specification.
  
  ==============================================================================================================================
  Environment(Alex):
  ==============================================================================================================================
  Map:
  
    Inputs:
      - Map size (rows and columns
      - Maximum doors per room
      
    Outputs:
      - 2 dimensional array of Room objects in (row, column) format
      
    Public methods:
      - map.generate()
        - Generates a new map
      - map.addDoors()
        - Adds doors to the existing base map
      - map.getMap()
        - Returns the array of room objects
        
    Private methods:
      - map.fixDoors(int Door Number, int Room Number)
        -Adds doors to make all rooms accessible
      - map.unaccess()
        -resets the access parameter for the checkaccessibility method
      - map.scramble()
        -Returns numbers 1-roomNum in a random order to equalize map generation
    
    Debug methods:
      - map.print()
        -Prints the array in console
      - map.checkDoorsPerRoom()
        -Returns true if every room has 1-3 doors, false otherwise
      - map.checkAccessibility(int starting room)
        -Returns true if all rooms are connected, false otherwise
        -Recursive looping for each room it checks
    
  Room:
    Inputs:
      - Room Number
      
    Outputs:
      - N/A
    
    Public methods:
      - setAdj(int direction, int adjNum)
        -Sets the adjacent room for that direction
      - getAdj(int direction)
        - Returns the adjacent room in that direction
      - getDoors()
        - Returns the number of doors
      - AddDoor(int direction)
        - Adds a door in that direction
      - checkDoor(int direction)
        - True if a door is there, false if wall
      - isAccess()
        - Returns if the room is accessible
      - setAccess(bool access)
        - Sets the rooms accessibility parameter
    
    Private methods:
    
    
    Debug methods:
    
  
  Trivia:
    Inputs:
      - Nothing
      
    Outputs:
      -Trivia Questions as a String with answer included
      
    Public methods:
      - trivia.getAvailNums(String question set)
        -Returns the index number of all unused questions in the specified question set as an array
      - trivia.getQuestion(int number)
        -Returns the question with the specified index number
      - trivia.getAnswers(int number)
        -Returns the answer choices for the question with the specified index number
      - trivia.giveAnswer(String answer)
        -Returns true/false wether the answer is right or wrong
        
    Private methods:
      - trivia.readQuestions(String file name)
        -Reads the questions from the specified file and stores them in an array for use later
      - trivia.switchFile(String file name)
        -Switches to a different set of questions
  
  Scores:
    Inputs:
      -Scores as a String in "ABC123" format
      
    Outputs:
      -Array of sorted high scores in "ABC123" format
  
  ==============================================================================================================================
  Graphics(Coral):
  ==============================================================================================================================
  
  HUD:
    
  Textures:
